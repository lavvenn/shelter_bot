import random
import string
import json



from shelter_game.shelter import *

with open("shelter_game/characteristics.json") as c, open("shelter_game/shelters.json") as s:
    characteristics = json.load(c)
    shelters = json.load(s)




def _get_random_bio_characteristics() -> str:
    age = random.randint(18, 80)
    gender = random.choice(["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"])
    orientation = random.choice(["–≥–µ—Ç–µ—Ä–æ", "–≥–æ–º–æ", "–±–∏", "–∞—Å–µ–∫—Å—É–∞–ª"])

    if gender == "–º—É–∂—á–∏–Ω–∞":
        return f"–º—É–∂—á–∏–Ω–∞ {age} –ª–µ—Ç, {orientation}"
    if gender == "–∂–µ–Ω—â–∏–Ω–∞":
        ret_str = f"–∂–µ–Ω—â–∏–Ω–∞ {age} –ª–µ—Ç, {orientation}"
        if random.randint(0, 100) >= 50:
            ret_str += " –±–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
        return ret_str
    else:
        return str(ret_str)


def get_random_card(card_numder: int, user_id: int, user_name: str) -> Card:
    return Card(
        user_id=user_id,
        number=card_numder,
        name=user_name,
        profession=[random.choice(characteristics["professions"]), False],
        bio_characteristics=[_get_random_bio_characteristics(), False],
        health=[random.choice(characteristics["health"]), False],
        hobby=[random.choice(characteristics["hobbies"]), False],
        phobia=[random.choice(characteristics["phobias"]), False],
        character=[random.choice(characteristics["character"]), False],
        additional_information=[
            random.choice(characteristics["additional_information"]),
            False,
        ],
        knowledge=[random.choice(characteristics["knowledge"]), False],
        baggage=[random.choice(characteristics["baggages"]), False],
        action_card=["üõ†–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüõ†", False],
        condition_card=["üõ†–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüõ†", False],
    )


def _get_random_shelter() -> Shelter:
    shelter_name = random.choice(list(shelters["shelters_dict"].keys()))
    shelter_discription = shelters["shelters_dict"][shelter_name]
    rooms = random.choice(shelters["rooms_list"])
    number_of_items = random.randint(1, 5)
    items = [random.choice(shelters["items"]) for _ in range(number_of_items)]
    size = f"{random.randint(100,550)} m¬≤"
    time = f"{random.randint(5,15)} –ª–µ—Ç"

    return Shelter(
        name=shelter_name,
        description=shelter_discription,
        rooms=rooms,
        loot=items,
        size=size,
        time=time,
    )


def _get_random_catastrophe() -> Catastrophe:
    catastrophe_name = random.choice(list(shelters["catastrophes"].keys()))

    return Catastrophe(
        name=catastrophe_name, description=shelters["catastrophes"][catastrophe_name]
    )


def get_random_game(name: str) -> Game:

    catastrophe = _get_random_catastrophe()

    shelter = _get_random_shelter()

    return Game(name=name, catastrophe=catastrophe, shelter=shelter)


def show_characteristic(characteristic: list) -> str:
    if characteristic[1] == True:
        return characteristic[0]
    else:
        return "#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£#Ô∏è‚É£"


def show_my_characteristic(characteristic: list) -> str:
    if characteristic[1] == True:
        return f"{characteristic[0]}üü¢"
    else:
        return f"{characteristic[0]}üî¥"


def print_card(card: Card) -> str:

    characteristics_list = [
        characteric[0]
        for characteric in card.get_all_characteristics().values()
        if characteric[1] == True
    ]

    text = f"""
**–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä:**{card.number}

**–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** {show_characteristic(card.characteristics["biological_characteristics"])}

**–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:** {show_characteristic(card.characteristics["profession"])}

**–ó–¥–æ—Ä–æ–≤—å–µ:** {show_characteristic(card.characteristics["health"])}

**–•–æ–±–±–∏:** {show_characteristic(card.characteristics["hobby"])}

**–§–æ–±–∏—è:** {show_characteristic(card.characteristics["phobia"])}

**–•–∞—Ä–∞–∫—Ç–µ—Ä:** {show_characteristic(card.characteristics["character"])}

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {show_characteristic(card.characteristics["additional_information"])}

**–ó–Ω–∞–Ω–∏—è:** {show_characteristic(card.characteristics["knowledge"])}

**–ë–∞–≥–∞–∂:** {show_characteristic(card.characteristics["baggage"])}

**–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {show_characteristic(card.characteristics["action_card"])}

**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {show_characteristic(card.characteristics["condition_card"])}
"""
    return text


def print_my_card(card: Card) -> str:

    text = f"""
**–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä:**{card.number}

**–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** __{show_my_characteristic(card.characteristics["biological_characteristics"])}__

**–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:** __{show_my_characteristic(card.characteristics["profession"])}__

**–ó–¥–æ—Ä–æ–≤—å–µ:** __{show_my_characteristic(card.characteristics["health"])}__

**–•–æ–±–±–∏:** __{show_my_characteristic(card.characteristics["hobby"])}__

**–§–æ–±–∏—è:** __{show_my_characteristic(card.characteristics["phobia"])}__

**–•–∞—Ä–∞–∫—Ç–µ—Ä:** __{show_my_characteristic(card.characteristics["character"])}__

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** __{show_my_characteristic(card.characteristics["additional_information"])}__

**–ó–Ω–∞–Ω–∏—è:** __{show_my_characteristic(card.characteristics["knowledge"])}__

**–ë–∞–≥–∞–∂:** __{show_my_characteristic(card.characteristics["baggage"])}__

**–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** __{show_my_characteristic(card.characteristics["action_card"])}__

**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** __{show_my_characteristic(card.characteristics["condition_card"])}__
"""

    return text

def print_shelter(shelter: Shelter) -> str:
    text = f"""
**–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–Ω–∫–µ—Ä–∞:** {shelter.name}

**–û–ø–∏—Å–∞–Ω–∏–µ:** {shelter.description}

**–ö–æ–º–Ω–∞—Ç—ã:** {shelter.rooms}

**–ü—Ä–µ–¥–º–µ—Ç—ã:** {shelter.loot}

**–†–∞–∑–º–µ—Ä:** {shelter.size}
**–í—Ä–µ–º—è:** {shelter.time}
"""
    return text

def print_catastrophe(catastrophe: Catastrophe) -> str:
    text = f"""
**–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞:** {catastrophe.name}

**–û–ø–∏—Å–∞–Ω–∏–µ:** {catastrophe.description}
"""
    return text
