from random import randint

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from game_states import Game

from shelter.shelter_utils import get_random_game, get_random_card

from keyboards import builders as b
from keyboards import reply as r
from keyboards import inline as i

from handlers.start import all_games, waiting_rooms


router = Router()

# <--start_game handlers-->
@router.message(F.text == "üÜïÔ∏è–Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
async def start_game(message: Message, state: FSMContext):
    await state.set_state(Game.configuration)
    await message.answer(f"–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É üìõ–æ—Ç–º–µ–Ω–∞", reply_markup=b.get_standart_kb("üìõ–æ—Ç–º–µ–Ω–∞"))
    await message.answer(f"–Ω–≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ —á—Ç–æ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª", reply_markup=b.gpt_choice_kb())


@router.message(Game.configuration, F.text == "üìõ–æ—Ç–º–µ–Ω–∞")
async def cancel_game(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=r.main_kb)


@router.message(Game.configuration)
async def game_configuration_exeption(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ —á—Ç–æ –≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª")

@router.callback_query(Game.configuration, F.data.startswith("gpt_"))
async def gpt_choice(query: CallbackQuery, state: FSMContext):
    global all_games, waiting_rooms

    game_number = str(randint(100,999))

    if not game_number in all_games.keys():
        all_games[game_number] = get_random_game(name=game_number)
        all_games[game_number].add_card(get_random_card(0, query.from_user.id, query.from_user.full_name))

        await state.update_data(game_name=game_number)

        await state.set_state(Game.waiting)
        await query.message.answer(
            f"–æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ {game_number} –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å üöÄ—Å—Ç–∞—Ä—Ç",
            reply_markup=i.start_game_kb,
        )
        msg = await query.message.answer(
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∏–≥—Ä–µ {game_number}\n1-@{query.message.from_user.username}"
        )
        waiting_rooms[game_number] = {query.from_user.id: msg.message_id}


    else:
        await query.message.answer("–∏–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ") 